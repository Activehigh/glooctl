syntax = "proto3";
package v1;

import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "status.proto";
import "metadata.proto";

/**
 * Upstream represents a destination for routing. Upstreams can be compared to [clusters](TODO) in [envoy](TODO) terminology.
 * Upstreams can take a variety of [types](TODO) in gloo. Language extensions known as [plugins](TODO) allow the addition of new
 * types of upstreams. See [upstream types](TODO) for a detailed description of available upstream types.
 */
message Upstream {
    // Name of the upstream. Names must be unique and follow the following syntax rules:
    // One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
    string name = 1;
    // Type indicates the type of the upstream. Examples include [service](TODO), [kubernetes](TODO), and [aws](TODO)
    // Types are defined by the [plugin](TODO) associated with them.
    string type = 2;
    // Connection Timeout tells gloo to set a timeout for unresponsive connections created to this upstream.
    // If not provided by the user, it will default to a [default value](TODO)
    google.protobuf.Duration connection_timeout = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
    // Spec contains properties that are specific to the upstream type. The spec is always required, but
    // the expected content is specified by the [upstream plugin] for the given upstream type.
    // Most often the upstream spec will be a map<string, string>
    google.protobuf.Struct spec = 4;
    // Certain upstream types support (and may require) [functions](TODO).
    // Functions allow function-level routing to be done. For example, the [aws lambda](TODO) upstream type
    // Permits routing to [aws lambda functions].
    // [routes](TODO) on [virtualhosts] can specify [function destinations] to route to specific functions.
    repeated Function functions = 5;
    // Status indicates the validation status of the upstream resource. Status is read-only by clients, and set by gloo during validation
    Status status = 6;
    // Metadata contains the resource metadata for the upstream
    Metadata metadata = 7;
}

message Function {
    // Name of the function. Functions are referenced by name from routes and therefore must be unique within an upstream
    string name = 1;
    // Spec for the function. Like [upstream specs](TODO), the content of function specs is specified by the [upstream plugin](TODO) for the upstream's type.
    google.protobuf.Struct spec = 4;
}